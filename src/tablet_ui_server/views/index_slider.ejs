<html>

<head>


    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=0.8, shrink-to-fit=yes, user-scalable=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>LC</title>


    <link href="vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet">
    <link href="css/small-business.css" rel="stylesheet">



    <style>
        body {
            background-color: rgb(44, 43, 43);
        }

        .my-sidebar {
            -ms-flex: 0 0 800;
            flex: 0 0 800;
            background-color: greenyellow;
        }

        .gauge_text {
            font-weight: 900;
            color: aliceblue;
            font-size: 1.6em;
        }
    </style>
</head>

<body>




<div class="container-fluid" style="max-width: 1280px;">


    <div class="row" style="border:2px solid white;">
        <div class="col-md-3" style="border:2px solid white;">
        <h1 style="color: white">BRK: <span id="dispsetbrk">-</span></h1>
        </div>

        <div class="col-md-6" style="border:2px solid white;">
<br>
        </div>

        <div class="col-md-3" style="border:2px solid white;">
            <h1 style="color: white">BRK: <span id="dispsetvel">-</span>%</h1>
        </div>
    </div>

</div>


    <!-- Heading Row -->
    <div class="row" style="border:2px solid white;">
        <div class="col-md-1 col-md-offset-1" style="border:2px solid white;">
            <div class="u-cf">
                <div class="u-left" style="height:80%">
                    <input type="range" value="4" min="0" id="brkslider" max="4" style="-webkit-appearance: slider-vertical; min-height: 800px; max-height: 1000px;">
                </div>
            </div>
        </div>


        <div class="col-md-10 col-md-offset-1" style="border:2px solid white;">
            <div class="row">
                <center>
                <div class="col-md-12 col-md-offset-1" style="width: 50%" >
                    <img class="img-responsive img-center" src="/img/new_icons/icon_512x128_Notbremse.png" width="400" id="img_notbremse" onclick="send_notbremse()" />
                </div>
            </center>
            </div>

        </div>



        <div class="col-md-1 col-md-offset-1" style="border:2px solid white;">
            <div class="u-cf">
                <div class="u-left" style="height: 80%">
                    <input type="range" value="0" id="velslider" min="0" max="100" style="-webkit-appearance: slider-vertical; min-height: 800px; max-height: 1000px;">
                </div>

            </div>
        </div>
    </div>

</div>

























    <!-- Bootstrap core JavaScript -->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
    <script src="js/204socket.io.js"></script>
    <script src="js/gauge.js"></script>




    <script>

        var firesound = new Audio('./audio/fire.mp3');
        var firesound_clear = new Audio('./audio/fire_clear.mp3');

        var embrakeactivatedsound = new Audio('./audio/embrake_activated.mp3');

        var forwardsound = new Audio('./audio/forward.mp3');
        var backwardsound = new Audio('./audio/backward.mp3');


        var modecurrentsound = new Audio('./audio/mode_current.mp3');
        var moderpmsound = new Audio('./audio/mode_rpm.mp3');

        var directionchangesoundplayed = false;

        var last_breaklevel = -1;


        var last_direction = false;










        document.addEventListener('keydown',function(event){
            if(event.keyCode === 49){
                change_breakingstep(1);
            }else if(event.keyCode == 50){
                change_breakingstep(2)
            } if(event.keyCode == 51){
                change_breakingstep(3)
            } if(event.keyCode == 52){
                change_breakingstep(4)
            } if(event.keyCode == 48){
                change_breakingstep(0)
            }

        })
        var socket = null;

        var fire_detection_sound_intervall = null;
        var fire_detection_last_state = false;
        var fire_sound_cleared = false;
        var chmoderpm_switched = false;
        //SET TO BG IMG_SIZE
        var enmodecc = 0;

        function change_direction() {
            socket.emit('event', { 'event': 'dirch' });
            enmodecc = 0;
        }

        function change_ctlmode() {
            socket.emit('event', { 'event': 'ctlmode' });
            enmodecc =0;
        }


        function setvel(_s){
            console.log("setvel", _s);
            socket.emit('event', { 'event': 'velocity','state':_s });
        }

        function setbrk(_s){
            console.log("setbrk", _s);
            if(_s == "0"){
                socket.emit('event', { 'event': 'brkstep0' });
            }else if(_s == "1"){
                socket.emit('event', { 'event': 'brkstep1' });
            }else if(_s == "2"){
                socket.emit('event', { 'event': 'brkstep2' });
            }if(_s == "3"){
                socket.emit('event', { 'event': 'brkstep3' });
            }if(_s == "4"){
                socket.emit('event', { 'event': 'brkstep4' });
            }
        }

        function hupe(_state){
            socket.emit('event', { 'event': 'hupe','state':_state });
        }











        function change_breakingstep(_var) {
            if(_var == 0){
                socket.emit('event', { 'event': 'brkstep0' });
            }else  if(_var == 1){
                socket.emit('event', { 'event': 'brkstep1' });
            }else  if(_var == 2){
                socket.emit('event', { 'event': 'brkstep2' });
            }else  if(_var == 3){
                socket.emit('event', { 'event': 'brkstep3' });
            }else  if(_var == 4){
                socket.emit('event', { 'event': 'brkstep4' });
            }

        }


        function send_notbremse(){
            socket.emit('event', { 'event': 'embreak' });
            enmodecc =0;
        }


        function switch_image(_id, _state) {
            var th = $("#img_" + _id);
            if (th == null || _state == null || _id == null) {
                th.attr("src", "/img/zusi_icons/np_error.png");
                console.log("INVALID STATE IMAGE:" + _id + " s:" + _state)
                return;
            }
            th.attr("src", "/img/zusi_icons/" + String(_id) + "_" + String(_state) + ".png");
        }

        var old_alert_msg = "";
        var fahrtrichtungtext = "---";
        var chmodeicon_switched = false;
        var fire_blink = false;
        function parse_state_data(_data) {
            if (_data == null || _data.display == null) {
                show_alert("DATA STATE PARSING FAILED")
            }
            console.log(_data);
            //UPDATE GAUGES
            if (_data.display.breaklevel != undefined && _data.display.breaklevel != null) {
               $("#dispsetbrk").html(_data.display.breaklevel);
            }
            if (_data.display.vel != undefined && _data.display.vel != null) {
                $("#dispsetbrk").html(_data.display.vel);
            }
        }

        var zoom = 1;
        var width = 100;

        function bigger() {
            zoom = zoom + 0.1;
            width = 100 / zoom;
            document.body.style.transformOrigin = "left top";
            document.body.style.transform = "scale(" + zoom + ")";
            document.body.style.width = width + "%";
        }
        function smaller() {
            zoom = zoom - 0.1;
            width = 100 / zoom;
            document.body.style.transformOrigin = "left top";
            document.body.style.transform = "scale(" + zoom + ")";
            document.body.style.width = width + "%";
        }
        function scale(_z) {
            zoom = _z;
            width = 100 / zoom;
            document.body.style.transformOrigin = "left top";
            document.body.style.transform = "scale(" + zoom + ")";
            document.body.style.width = width + "%";
        }

        $(document).ready(function () {

            scale(1280 / screen.width);
            smaller();


            socket = io();
            socket.on('broadcast', function (data) {
                if (data == null) { return; }
                //console.log(data);
                parse_state_data(data)
            });
            var velslider = document.getElementById('velslider');
            velslider.addEventListener('change',function(_event){
                setvel($("#velslider").val());
            });
            velslider.addEventListener('input',function(_event){
                setvel($("#velslider").val());
            });

            var brkslider = document.getElementById('brkslider');
            brkslider.addEventListener('change',function(_event){
                setbrk($("#brkslider").val());
            });
            brkslider.addEventListener('input',function(_event){
                setbrk($("#brkslider").val());
            });

           // socket.emit('event', { 'event': 'startup' });
        });
    </script>

</body>

</html>
